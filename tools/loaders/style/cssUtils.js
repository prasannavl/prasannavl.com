"use strict";
const _ = require("lodash");

const prefix = '_s';
const inserted = {};

/**
 * Example:
 *   // Insert CSS styles object generated by `css-loader` into DOM
 *   var removeCss = insertCss([[1, 'body { color: red; }']]);
 *
 *   // Remove it from the DOM
 *   removeCss();
 */
function insertCss(styles, options) {

    /**
     * Remove style/link elements for specified node IDs
     * if they are no longer referenced by UI components.
     */

    function removeCss(ids) {
        ids.forEach(function (id) {
            if (--inserted[id] <= 0) {
                const elem = document.getElementById(prefix + id);
                if (elem) {
                    elem.parentNode.removeChild(elem);
                }
            }
        });
    }

    // Base64 encoding and decoding - The "Unicode Problem"
    // https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_Unicode_Problem
    function b64EncodeUnicode(str) {
        return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function (match, p1) {
            String.fromCharCode("0x" + p1);
        }));
    }

    const opts = _.extend({ 
        replace: false,
        prepend: false,
    }, options);

    const replace = opts.replace;
    const prepend = opts.prepend;
    
    const ids = [];
    for (var i = 0; i < styles.length; i++) {
        //const [moduleId, css, media, sourceMap, moduleName] = styles[i];
        const currentStyle = styles[i];
        
        const moduleId = currentStyle[0];
        const css = currentStyle[1];
        const media = currentStyle[2];
        const sourceMap = currentStyle[3];
        
        const id = moduleId + "-" + i;

        if (inserted[id]) {
            if (!replace) {
                inserted[id]++;
                continue;
            }
        }

        inserted[id] = 1;
        ids.push(id);

        var elem = document.getElementById(prefix + id);
        var create = false;

        if (!elem) {
            create = true;

            elem = document.createElement('style');
            elem.setAttribute('type', 'text/css');
            elem.id = prefix + id;

            if (media) {
                elem.setAttribute('media', media);
            }
        }

        var cssText = css;
        if (sourceMap) {
            cssText += "\n/*# sourceMappingURL=data:application/json;base64," + b64EncodeUnicode(JSON.stringify(sourceMap)) + "*/";
            cssText += "\n/*# sourceURL=" + sourceMap.file + "*/";
        }

        if ('textContent' in elem) {
            elem.textContent = cssText;
        } else {
            elem.styleSheet.cssText = cssText;
        }

        if (create) {
            if (prepend) {
                document.head.insertBefore(elem, document.head.childNodes[0]);
            } else {
                document.head.appendChild(elem);
            }
        }
    }

    return removeCss.bind(null, ids);
}

module.exports = insertCss;